@inherits UmbracoViewPage<ContactFormViewModel>
@using NKN.Core.ViewModels.Partials.Forms
@using Constants = NKN.Core.Constants.Constants

@if (TempData[Constants.TempDataSuccess] != null)
{
<form>
	<span class="contact-form-success js-success-message" style="display:block">@UmbracoDictionary.Forms.Labels.SuccessMessage</span>
</form>

}
else
{
	if (TempData[Constants.TempDataFail] != null)
	{
		<form><span class="contact-form-error error-message-top">@UmbracoDictionary.Forms.Labels.FailMessage</span></form>
	}
	using (Html.BeginUmbracoForm("SubmitForm", "ContactForm", null, new { id = "contact-us"}, FormMethod.Post))
	{
		@Html.AntiForgeryToken()
		<fieldset>
			<div class="fieldset-inner">
				<div class="input-wrap">
					@Html.LabelFor(f => f.FullName, new { @class = "sr-only" })
					@Html.TextBoxFor(f => f.FullName, new { placeholder = UmbracoDictionary.Forms.Labels.FullName })
					@Html.ValidationMessageFor(f => f.FullName)
				</div>
				<div class="input-wrap">
					@Html.LabelFor(f => f.Email, new { @class = "sr-only" })
					@Html.TextBoxFor(f => f.Email, new { placeholder = UmbracoDictionary.Forms.Labels.Email})
					@Html.ValidationMessageFor(f => f.Email)
				</div>
				<div class="input-wrap input-wrap-fullwidth">
					@Html.LabelFor(f => f.Message, new { @class = "sr-only" })
					@Html.TextAreaFor(f => f.Message, new { placeholder = UmbracoDictionary.Forms.Labels.Message})
					@Html.ValidationMessageFor(f => f.Message)
				</div>
				<span class="contact-form-error js-error-message"></span>
				<div class="input-submit-wrap">
					<button type="submit" id="contact-us-submit" class="btn">@UmbracoDictionary.Forms.Labels.SubmitButton</button>
				</div>
			</div>
		</fieldset>
	}

}
